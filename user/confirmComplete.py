from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from db.user import confirmOrder
from create_bot import bot
from keyboard.user import cancel_reply_keyboard, main_menu_worker

router = Router()


# üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="short_confirm")],
        [InlineKeyboardButton(text="üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="short_restart")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="short_cancel")]
    ])


# üåÄ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BuyOneShortState(StatesGroup):
    price = State()
    id = State()
    confirm = State()


# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç FSM ‚Äî –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback
@router.callback_query(F.data.startswith("confirm_my_"))
async def start_buy_one(callback_query: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback_query.data.replace("confirm_my_", ""))
        await state.clear()
        await state.update_data(id=order_id)
        await state.set_state(BuyOneShortState.price)
        await callback_query.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):", reply_markup=cancel_reply_keyboard())
    except ValueError:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)


# üí∏ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
@router.message(BuyOneShortState.price)
async def set_price(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    print(text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if text in ["‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        await state.clear()
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_worker())
        return

    if not text.isdigit():
        await message.answer("‚ö† –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        return

    await state.update_data(price=text)
    data = await state.get_data()

    summary = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {data['price']} ‚ÇΩ"
    )

    await state.set_state(BuyOneShortState.confirm)
    await message.answer(summary, parse_mode="HTML", reply_markup=get_confirm_keyboard())


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(BuyOneShortState.confirm, F.data == "short_confirm")
async def confirm_order(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    order_id = data.get("id")
    price = data.get("price")

    if order_id is None or price is None:
        await callback_query.answer("‚ö† –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        await state.clear()
        return

    confirmOrder(id=order_id, comment="", price=price)
    await state.clear()
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.", reply_markup=main_menu_worker())


# üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
@router.callback_query(BuyOneShortState.confirm, F.data == "short_restart")
async def restart_form(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("id")

    await state.clear()
    await state.update_data(id=order_id)
    await state.set_state(BuyOneShortState.price)
    await callback_query.message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞:", reply_markup=cancel_reply_keyboard())


# ‚ùå –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
@router.callback_query(BuyOneShortState.confirm, F.data == "short_cancel")
async def cancel_inline(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_worker())


# ‚ùå –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É ‚Äî fallback (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç "‚ùå –û—Ç–º–µ–Ω–∞" –≤ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@router.message(F.text.lower().in_({"–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"}))
async def cancel_fallback(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_worker())
