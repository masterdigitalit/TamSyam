from aiogram import Router, F
from aiogram.types import CallbackQuery
from create_bot import bot
from db.admin import get_unpaid_workers_paginated, count_unpaid_workers, get_order_to_pay, set_order_paid
from keyboard.admin import get_pay_workers_keyboard, pay_to_worker_confirm_btn
from aiogram.filters import BaseFilter
from typing import Union, List
from db.admin import getAdminsId

router = Router()


# –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–æ–≤
class ChatTypeFilter(BaseFilter):
    def __init__(self, user_id: Union[int, List[int]]):
        self.user_ids = [user_id] if isinstance(user_id, int) else user_id or []

    async def __call__(self, message) -> bool:
        return message.from_user.id in self.user_ids


# üîò –°—Ç–∞—Ä—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@router.callback_query(F.data == "pay_workers", ChatTypeFilter(getAdminsId()))
async def show_pay_workers(callback: CallbackQuery):
    page = 0
    page_size = 10
    orders = get_unpaid_workers_paginated(offset=page * page_size, limit=page_size)
    total_orders = count_unpaid_workers()

    if not orders:
        await callback.answer("–ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É.")
        return

    total_pages = (total_orders + page_size - 1) // page_size
    text = f"üí∏ <b>–†–∞–±–æ—Ç–Ω–∏–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É:</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    markup = get_pay_workers_keyboard(orders, page)

    await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)
    await callback.answer()


# üîÅ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@router.callback_query(F.data.startswith("pay_worker_next_"), ChatTypeFilter(getAdminsId()))
async def handle_next_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[3])
    page_size = 10
    orders = get_unpaid_workers_paginated(offset=page * page_size, limit=page_size)

    total_orders = count_unpaid_workers()
    total_pages = (total_orders + page_size - 1) // page_size

    if not orders:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return

    markup = get_pay_workers_keyboard(orders, page)
    text = f"üí∏ <b>–†–∞–±–æ—Ç–Ω–∏–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É:</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    await callback.answer()


# üîÅ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@router.callback_query(F.data.startswith("pay_worker_prev_"), ChatTypeFilter(getAdminsId()))
async def handle_prev_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[3])
    page_size = 10
    orders = get_unpaid_workers_paginated(offset=page * page_size, limit=page_size)
    total_orders = count_unpaid_workers()
    total_pages = (total_orders + page_size - 1) // page_size

    markup = get_pay_workers_keyboard(orders, page)
    text = f"üí∏ <b>–†–∞–±–æ—Ç–Ω–∏–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É:</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    await callback.answer()


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("pay_worker_"), ChatTypeFilter(getAdminsId()))
async def handle_worker_payment(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) != 3 or not parts[2].isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    order_id = int(parts[2])
    order = get_order_to_pay(order_id)
    print(order, order_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑


    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        return

    text = (
        f"<b>üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order['Id']}</b>\n\n"
        f"<b>üë∑ –†–∞–±–æ—Ç–Ω–∏–∫:</b> {order['WorkerName'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        f"<b>üÜî Telegram ID:</b> <code>{order['WorkerId']}</code>\n"
        f"<b>üìç –ê–¥—Ä–µ—Å:</b> {order['Adress']}\n"
        f"<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order['dateCreated']}\n"
        f"<b>üí∞ –ö –≤—ã–ø–ª–∞—Ç–µ:</b> <code>{order['WorkerPrice']} ‚ÇΩ</code>"
    )

    markup = pay_to_worker_confirm_btn(order)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith("pay_to_user_order_admin_confirm_"), ChatTypeFilter(getAdminsId()))
async def confirm_worker_payment(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) < 6 or not parts[-1].isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    order_id = int(parts[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
    order = get_order_to_pay(order_id)
    if not order:
        await callback.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –ë–î
    set_order_paid(order_id)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–ø–ª–∞—Ç–µ
    await callback.message.edit_text(
        f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ <b>{order['WorkerPrice']} ‚ÇΩ</b> —Ä–∞–±–æ—Ç–Ω–∏–∫—É <b>{order['WorkerName']}</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.answer("üí∏ –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
