from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import BaseFilter
from typing import Union, List
from pathlib import Path
from create_bot import bot
from db.admin import getAdminsId
import pandas as pd
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill
from db.statistic import get_all_orders, get_users_stats, get_finance_stats
from aiogram.types import FSInputFile
router = Router()

# –§–∏–ª—å—Ç—Ä
class ChatTypeFilter(BaseFilter):
    def __init__(self, user_id: Union[int, List[int]]):
        self.user_ids = [user_id] if isinstance(user_id, int) else user_id or []

    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.user_ids


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞
@router.message(F.text == "–¢–∞–±–ª–∏—Ü–∞", ChatTypeFilter(getAdminsId()))
async def handle_orders(message: Message):


    def autofit_columns(writer, sheet_name, dataframe):
        worksheet = writer.sheets[sheet_name]
        for idx, col in enumerate(dataframe.columns, 1):
            column = dataframe[col].astype(str)
            max_length = max(
                column.map(len).max(),
                len(str(col))
            ) + 3
            worksheet.column_dimensions[get_column_letter(idx)].width = max_length

    def colorize_boolean_columns(worksheet, dataframe, columns_to_color):
        green_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
        red_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

        for row_idx in range(2, len(dataframe) + 2):
            for col_name in columns_to_color:
                col_idx = dataframe.columns.get_loc(col_name) + 1
                cell = worksheet.cell(row=row_idx, column=col_idx)
                value = dataframe.at[row_idx - 2, col_name]
                if value == 1:
                    cell.fill = green_fill
                    cell.value = "‚úÖ"
                else:
                    cell.fill = red_fill
                    cell.value = "‚ùå"

    def export_to_excel(output_path):
        orders = sorted(get_all_orders(), key=lambda x: x["Id"])
        users = get_users_stats()
        finance_stats = get_finance_stats()

        orders_df = pd.DataFrame(orders)
        users_df = pd.DataFrame(users)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        monthly_df = pd.DataFrame(finance_stats["–ü–æ –º–µ—Å—è—Ü–∞–º"])

        # –°–æ–∑–¥–∞–¥–∏–º DataFrame –¥–ª—è "–°–µ–≥–æ–¥–Ω—è" –∏ "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è" ‚Äî –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–¥–µ–ª–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        today_dict = finance_stats["–°–µ–≥–æ–¥–Ω—è"]
        all_time_dict = finance_stats["–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"]

        # –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –≤ –æ–¥–∏–Ω DataFrame, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:
        summary_df = pd.DataFrame([
            {
                "–ü–µ—Ä–∏–æ–¥": "–°–µ–≥–æ–¥–Ω—è",
                "–î–æ—Ö–æ–¥": today_dict["–î–æ—Ö–æ–¥ (–¥–µ–Ω—å)"],
                "–í—ã–ø–ª–∞—Ç—ã": today_dict["–í—ã–ø–ª–∞—Ç—ã (–¥–µ–Ω—å)"],
                "–ü—Ä–∏–±—ã–ª—å": today_dict["–ü—Ä–∏–±—ã–ª—å (–¥–µ–Ω—å)"]
            },
            {
                "–ü–µ—Ä–∏–æ–¥": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è",
                "–î–æ—Ö–æ–¥": all_time_dict["–î–æ—Ö–æ–¥ (–≤—Å–µ–≥–æ)"],
                "–í—ã–ø–ª–∞—Ç—ã": all_time_dict["–í—ã–ø–ª–∞—Ç—ã (–≤—Å–µ–≥–æ)"],
                "–ü—Ä–∏–±—ã–ª—å": all_time_dict["–ü—Ä–∏–±—ã–ª—å (–≤—Å–µ–≥–æ)"]
            }
        ])

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –∑–∞–∫–∞–∑–æ–≤
        orders_df.rename(columns={
            "Id": "ID",
            "Adress": "–ê–¥—Ä–µ—Å",
            "Price": "–¶–µ–Ω–∞",
            "WorkerPrice": "–¶–µ–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É",
            "WorkerId": "ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞",
            "dateCreated": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            "dateDone": "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
            "dateStarted": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
            "FullName": "–§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞",
            "Done": "–ì–æ—Ç–æ–≤",
            "Active": "–í —Ä–∞–±–æ—Ç–µ",
            "Paid": "–û–ø–ª–∞—á–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫—É"
        }, inplace=True)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        users_df.rename(columns={
            "WorkerName": "–ò–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞",
            "TelegramId": "Telegram ID",
            "Status": "–°—Ç–∞—Ç—É—Å",
            "OrdersCount": "–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤",
            "TotalEarned": "–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ"
        }, inplace=True)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ –º–µ—Å—è—Ü–∞–º (—á—Ç–æ–±—ã –±—ã–ª–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
        monthly_df.rename(columns={
            "–ú–µ—Å—è—Ü": "–ú–µ—Å—è—Ü",
            "–î–æ—Ö–æ–¥ (–º–µ—Å)": "–î–æ—Ö–æ–¥",
            "–í—ã–ø–ª–∞—Ç—ã (–º–µ—Å)": "–í—ã–ø–ª–∞—Ç—ã",
            "–ü—Ä–∏–±—ã–ª—å (–º–µ—Å)": "–ü—Ä–∏–±—ã–ª—å"
        }, inplace=True)

        with pd.ExcelWriter(output_path, engine="openpyxl") as writer:
            # –ó–∞–∫–∞–∑—ã
            orders_df.to_excel(writer, sheet_name="–ó–∞–∫–∞–∑—ã", index=False)
            autofit_columns(writer, "–ó–∞–∫–∞–∑—ã", orders_df)
            colorize_boolean_columns(writer.sheets["–ó–∞–∫–∞–∑—ã"], orders_df, ["–ì–æ—Ç–æ–≤", "–í —Ä–∞–±–æ—Ç–µ", "–û–ø–ª–∞—á–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫—É"])

            # –†–∞–±–æ—Ç–Ω–∏–∫–∏
            users_df.to_excel(writer, sheet_name="–†–∞–±–æ—Ç–Ω–∏–∫–∏", index=False)
            autofit_columns(writer, "–†–∞–±–æ—Ç–Ω–∏–∫–∏", users_df)

            # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è
            # –°–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ–º —Å–≤–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_df.to_excel(writer, sheet_name="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", startrow=0, index=False)
            autofit_columns(writer, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", monthly_df)

            # –î–∞–ª–µ–µ –Ω–∏–∂–µ –¥–æ–±–∞–≤–∏–º —Å–≤–æ–¥ –ø–æ "–°–µ–≥–æ–¥–Ω—è" –∏ "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"
            summary_startrow = len(monthly_df) + 3  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã

            summary_df.to_excel(writer, sheet_name="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", startrow=summary_startrow, index=False)
            autofit_columns(writer, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", summary_df)

    # –ó–∞–ø—É—Å–∫
    export_to_excel("report.xlsx")
    file_path = Path("report.xlsx")
    export_to_excel(file_path)

    # 2. –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    document = FSInputFile(file_path)

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    await bot.send_document(chat_id=message.from_user.id, document=document, caption="üìä –û—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º")

